# -*- coding: utf-8 -*-
"""police_data_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16U56ElbAJBESTVber5qf0ZrBKSvs30Qq
"""

import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
from scipy.stats import linregress
import numpy as np
import plotly.express as px

today = datetime.today()
year = today.year

# https://gist.github.com/rogerallen/d75440e8e5ea4762374dfd5c1ddf84e0
us_state_to_abbrev = {
    "Alabama": "AL",
    "Alaska": "AK",
    "Arizona": "AZ",
    "Arkansas": "AR",
    "California": "CA",
    "Colorado": "CO",
    "Connecticut": "CT",
    "Delaware": "DE",
    "Florida": "FL",
    "Georgia": "GA",
    "Hawaii": "HI",
    "Idaho": "ID",
    "Illinois": "IL",
    "Indiana": "IN",
    "Iowa": "IA",
    "Kansas": "KS",
    "Kentucky": "KY",
    "Louisiana": "LA",
    "Maine": "ME",
    "Maryland": "MD",
    "Massachusetts": "MA",
    "Michigan": "MI",
    "Minnesota": "MN",
    "Mississippi": "MS",
    "Missouri": "MO",
    "Montana": "MT",
    "Nebraska": "NE",
    "Nevada": "NV",
    "New Hampshire": "NH",
    "New Jersey": "NJ",
    "New Mexico": "NM",
    "New York": "NY",
    "North Carolina": "NC",
    "North Dakota": "ND",
    "Ohio": "OH",
    "Oklahoma": "OK",
    "Oregon": "OR",
    "Pennsylvania": "PA",
    "Rhode Island": "RI",
    "South Carolina": "SC",
    "South Dakota": "SD",
    "Tennessee": "TN",
    "Texas": "TX",
    "Utah": "UT",
    "Vermont": "VT",
    "Virginia": "VA",
    "Washington": "WA",
    "West Virginia": "WV",
    "Wisconsin": "WI",
    "Wyoming": "WY",
    "District of Columbia": "DC",
    "American Samoa": "AS",
    "Guam": "GU",
    "Northern Mariana Islands": "MP",
    "Puerto Rico": "PR",
    "United States Minor Outlying Islands": "UM",
    "Virgin Islands, U.S.": "VI",
}

abbrev_to_us_state = dict(map(reversed, us_state_to_abbrev.items()))

def cleaner(df, year=None):
    df_clean = df.dropna().copy()


    if 'date' in df_clean.columns:
      df_clean['date'] = pd.to_datetime(df_clean['date'])
      df_clean['year'] = df_clean['date'].dt.year
      df_clean['month'] = df_clean['date'].dt.month
      df_clean['day'] = df_clean['date'].dt.day
      df_clean.drop(columns=['date'], inplace=True)
      df_clean.drop(df_clean[df_clean.year > year].index, inplace=True)


    if 'Geographic Area' or 'Geographic area' in df_clean.columns:
      df_clean.rename(columns={"Geographic Area": "Geographic_Area"}, inplace=True) or df_clean.rename(columns={"Geographic area": "Geographic_Area"}, inplace=True)

    if 'percent_completed_hs' in df_clean.columns:
      df_clean["percent_completed_hs"] = (df_clean["percent_completed_hs"].astype(str).str.replace("%", "", regex=False).astype(float))

    if 'poverty_rate' in df_clean.columns:
      df_clean['poverty_rate'] = df_clean['poverty_rate'].replace({'-': None}).dropna().astype(float)

    if 'share_white' in df_clean.columns:
      df_clean['share_white'] = df_clean['share_white'].replace('(X)', np.nan).dropna()
      df_clean["share_white"] = pd.to_numeric(df_clean["share_white"])
      df_clean['share_black'] = df_clean['share_black'].replace('(X)', np.nan).dropna()
      df_clean["share_black"] = pd.to_numeric(df_clean["share_black"])
      df_clean['share_hispanic'] = df_clean['share_hispanic'].replace('(X)', np.nan).dropna()
      df_clean["share_hispanic"] = pd.to_numeric(df_clean["share_hispanic"])
      df_clean['share_asian'] = df_clean['share_asian'].replace('(X)', np.nan).dropna()
      df_clean["share_asian"] = pd.to_numeric(df_clean["share_asian"])
      df_clean['share_native_american'] = df_clean['share_native_american'].replace('(X)', np.nan).dropna()
      df_clean["share_native_american"] = pd.to_numeric(df_clean["share_native_american"])

    if 'manner_of_death' in df_clean.columns:
      df_clean['race'] = df_clean['race'].replace('(X)', np.nan).dropna()
      df_clean['race'] = df_clean['race'].replace({'A': 'Asian', 'W': 'White', 'H': 'Hispanic', 'B': 'Black', 'N': 'Native American', 'O': 'Other'})
      df_clean['gender'] = df_clean['gender'].replace({'M': 'Male', 'F': 'Female'})
      df_clean['age'] = df_clean['age'].astype(str).str.replace(".0", "", regex=False).astype(int)

    if 'state' in df_clean.columns:
      df_clean.rename(columns={"state": "Geographic_Area"}, inplace=True)
      df_clean.rename(columns={"race": "Race"}, inplace=True)



    return df_clean

#load data
df_deaths = pd.read_csv('/content/Deaths_by_Police_US.csv')
df_poverty = pd.read_csv('/content/Pct_People_Below_Poverty_Level.csv')
df_hs = pd.read_csv('/content/Pct_Over_25_Completed_High_School.csv', na_values=["-"])
df_median = pd.read_csv('/content/Median_Household_Income_2015.csv')
df_race = pd.read_csv('/content/Share_of_Race_By_City.csv')

df_poverty_clean = cleaner(df_poverty, year=year)
df_deaths_clean = cleaner(df_deaths, year=year)
df_median_clean = cleaner(df_median, year=year)
df_race_clean = cleaner(df_race, year=year)
df_hs_clean = cleaner(df_hs, year=year)

poverty_plot_order = df_poverty_clean.groupby(['Geographic_Area'])['poverty_rate'].mean().sort_values(ascending=False).index.values
df_poverty_clean['mean'] = df_poverty_clean.groupby(['Geographic_Area'])['poverty_rate'].transform('mean')
hs_plot_order = df_hs_clean.groupby(['Geographic_Area'])['percent_completed_hs'].mean().sort_values(ascending=False).index.values
df_hs_clean['mean_hs'] = df_hs_clean.groupby(['Geographic_Area'])['percent_completed_hs'].transform('mean')

df_race_mean = df_race_clean.copy()
df_race_mean['White'] = df_race_mean.groupby(['Geographic_Area'])['share_white'].transform('mean')
df_race_mean['Black'] = df_race_mean.groupby(['Geographic_Area'])['share_black'].transform('mean')
df_race_mean['Hispanic'] = df_race_mean.groupby(['Geographic_Area'])['share_hispanic'].transform('mean')
df_race_mean['Asian'] = df_race_mean.groupby(['Geographic_Area'])['share_asian'].transform('mean')
df_race_mean['Native American'] = df_race_mean.groupby(['Geographic_Area'])['share_native_american'].transform('mean')

#used in poverty graph for x-axis limits
len_states = len(df_poverty_clean['Geographic_Area'].unique())

#gets the means of the race statistics by state
merged_white = df_race_mean[['Geographic_Area','White']].copy()
merged_white = merged_white.drop_duplicates()
merged_black = df_race_mean[['Geographic_Area','Black']].copy()
merged_black = merged_black.drop_duplicates()
merged_hispanic = df_race_mean[['Geographic_Area','Hispanic']].copy()
merged_hispanic = merged_hispanic.drop_duplicates()
merged_asian = df_race_mean[['Geographic_Area','Asian']].copy()
merged_asian = merged_asian.drop_duplicates()
merged_nativeamerican = df_race_mean[['Geographic_Area','Native American']].copy()
merged_nativeamerican = merged_nativeamerican.drop_duplicates()
merged_race_means = (
    merged_white
    .merge(merged_black, on='Geographic_Area', how='inner')
    .merge(merged_hispanic, on='Geographic_Area', how='inner')
    .merge(merged_asian, on='Geographic_Area', how='inner')
    .merge(merged_nativeamerican, on='Geographic_Area', how='inner')
)

df_race_melted = merged_race_means.melt(
        id_vars='Geographic_Area',
        value_vars=['White', 'Black', 'Hispanic', 'Asian', 'Native American'],
        var_name='Race',
        value_name='Percent'
        )

#get race stats by city
merged_white = df_race_clean.groupby('City', as_index=False)['share_white'].mean()
merged_white = merged_white.drop_duplicates()
merged_black = df_race_clean.groupby('City', as_index=False)['share_black'].mean()
merged_black = merged_black.drop_duplicates()
merged_hispanic = df_race_clean.groupby('City', as_index=False)['share_hispanic'].mean()
merged_hispanic = merged_hispanic.drop_duplicates()
merged_asian = df_race_clean.groupby('City', as_index=False)['share_asian'].mean()
merged_asian = merged_asian.drop_duplicates()
merged_nativeamerican = df_race_clean.groupby('City', as_index=False)['share_native_american'].mean()
merged_nativeamerican = merged_nativeamerican.drop_duplicates()
merged_race = (
    merged_white
    .merge(merged_black, on='City', how='inner')
    .merge(merged_hispanic, on='City', how='inner')
    .merge(merged_asian, on='City', how='inner')
    .merge(merged_nativeamerican, on='City', how='inner')
)

df_race_melted_city = merged_race.melt(
        id_vars='City',
        value_vars=['share_white', 'share_black', 'share_hispanic', 'share_asian', 'share_native_american'],
        var_name='Race',
        value_name='Percent'
        )
df_race_melted_city['Race'] = df_race_melted_city['Race'].replace({'share_white': "White", 'share_black': "Black", 'share_hispanic': "Hispanic", 'share_asian': "Asian", 'share_native_american': "Native American", 'O': 'Other'})

#finds states with min/max poverty
poverty_highest = df_poverty_clean.loc[df_poverty_clean['mean'].idxmax()]
poverty_lowest  = df_poverty_clean.loc[df_poverty_clean['mean'].idxmin()]
poverty_highest = poverty_highest.iloc[0]
poverty_lowest = poverty_lowest.iloc[0]

#max/min values
hs_highest = df_hs_clean.loc[df_hs_clean['mean_hs'].idxmax()]
hs_lowest  = df_hs_clean.loc[df_hs_clean['mean_hs'].idxmin()]
hs_highest = hs_highest.iloc[0]
hs_lowest = hs_lowest.iloc[0]

#plot of highschool graduation at age 25 by state
fig, ax = plt.subplots(figsize=(20, 6))

sns.barplot(
    data=df_hs_clean,
    x="Geographic_Area",
    y="percent_completed_hs",
    hue="mean_hs",
    order=hs_plot_order,
    palette="mako_r",
    errorbar=None,
    legend=False
)

ax.set_xlabel("State", fontsize=14, labelpad=15)
ax.set_ylabel("Highschool Completed by Age 25 (%)", fontsize=14, labelpad=15)
ax.set_ylim(70,95)
ax.text(40, 93, f"Highest Percent: {abbrev_to_us_state[hs_highest]}")
ax.text(40, 91.5, f"Lowest Percent: {abbrev_to_us_state[hs_lowest]}")
ax.set_title(
    "High School Graduation Rates by State (Age 25)",
    fontsize=15,
    fontweight='bold',
    pad=20,
    )
plt.show()

#plot of poverty rate by state
fig, ax = plt.subplots(figsize=(20, 6))

sns.barplot(
    data=df_poverty_clean,
    x="Geographic_Area",
    y="poverty_rate",
    hue="mean",
    order=poverty_plot_order,
    palette="mako_r",
    errorbar=None,
    legend=False
)

ax.set_xlabel("State", fontsize=14, labelpad=15)
ax.set_ylabel("Poverty Rate (%)", fontsize=14, labelpad=15)
ax.text(40, 27, f"Highest Percent: {abbrev_to_us_state[poverty_highest]}")
ax.text(40, 25.5, f"Lowest Percent: {abbrev_to_us_state[poverty_lowest]}")
plt.title(
    "Poverty Rates by U.S. State",
    fontsize=15,
    fontweight='bold',
    pad=20
    )

plt.show()

#Comparison of poverty levels and high school graduation rates by state
fig, ax1 = plt.subplots(figsize=(20, 5))

sns.lineplot(
    data=df_hs_clean,
    x="Geographic_Area",
    y="percent_completed_hs",
    ax=ax1,
    color='blue'
    )

ax2 = ax1.twinx()
sns.lineplot(
    data=df_poverty_clean,
    x="Geographic_Area",
    y="poverty_rate",
    ax=ax2,
    color='red'
    )

plt.xlim(0,len_states)
plt.title(
    "Comparison of Poverty Levels and High School Graduation Rates by State",
    fontsize=15,
    fontweight='bold',
    pad=20
    )
ax1.set_ylabel('Highschool Graduate Percent (%)', color='blue', labelpad=15)
ax2.set_ylabel('Poverty Per State (%)', color='red', labelpad=15)
ax1.set_xlabel('State', labelpad=15)

plt.show()

#kde of relationship of highschool graduate rates and poverty rates by state
merged_hs = df_hs_clean[['Geographic_Area','mean_hs']].copy()
merged_hs = merged_hs.drop_duplicates()
merged_poverty = df_poverty_clean[['Geographic_Area','mean']].copy()
merged_poverty = merged_poverty.drop_duplicates()
df_merged = pd.merge(merged_hs, merged_poverty, on="Geographic_Area")
pv_rate = df_merged["mean"]
hs_rate = df_merged["mean_hs"]

g = sns.jointplot(
    data=df_merged,
    x='mean',
    y='mean_hs',
    kind="kde",
    fill=True,
    alpha=0.5,

)
g.fig.suptitle(
    'Coorelation Between Poverty Rate and High School Graduation Across U.S. States',
    fontsize=15,
    fontweight='bold',
    y=1.05
    )
g.ax_joint.set_xlabel("Poverty Per State (%)", color="black", labelpad=15)
g.ax_joint.set_ylabel("Highschool Graduate Percent (%)", color="black", labelpad=15)

plt.show()

#analyze coorelation between high school graduation and povert rates by state
g = sns.lmplot(
    data=df_merged,
    x='mean',
    y='mean_hs',
    height=5,
    aspect=1
)

g.ax.set_xlabel("Poverty Per State (%)", color="black", labelpad=15)
g.ax.set_ylabel("High School Graduate Percent (%)", color="black", labelpad=15)
g.fig.suptitle(
    'Correlation Between Poverty Rate and High School Graduation',
    fontsize=15,
    fontweight='bold',
    y=1.05
    )

plt.show()

#regression statistics
slope, intercept, r_value, p_value, std_err = linregress(pv_rate, hs_rate)

print("R-squared:", r_value**2)
print("p-value:", p_value)

#analyze racial demos by state
plt.figure(figsize=(35,8))


sns.barplot(data=df_race_melted, x='Geographic_Area', y='Percent', hue='Race')
plt.xticks(rotation=90)
plt.ylabel('Percentage (%)', labelpad=15)
plt.xlabel('State', labelpad=15)
plt.title(
    'Racial Demographics by U.S. State',
    fontweight='bold',
    fontsize=15,
    pad=20
    )
plt.legend(title='Race', loc='upper left', bbox_to_anchor=(1, 1))

plt.show()

#analyzes race percents in police killings
counts_race = df_deaths_clean['Race'].value_counts()
labels = [f"{race} ({count} deaths)" for race, count in zip(counts_race.index, counts_race.values)]

fig, ax = plt.subplots(figsize=(8, 8))

wedges, texts, autotexts = ax.pie(
    counts_race.values,
    autopct='%1.0f%%',
    labeldistance=1.1,
    pctdistance=0.7,
    startangle=180,
    wedgeprops={'edgecolor': 'white'},
    textprops={'color': 'black'},
)



#color inside pie chart
for autotext in autotexts:
    autotext.set_color("white"),
    autotext.set_fontsize(10)

ax.set_ylabel('')

plt.title(
    "Total Police Deaths by Race",
    fontsize=15,
    fontweight="bold",
    color="black",
    loc="center"
    )
ax.legend(wedges, labels, title="Race", loc="center left", bbox_to_anchor=(1, 0.5))
plt.show()

#analyzes gender percents in police killings
counts_sex = df_deaths_clean['gender'].value_counts()
labels = [f"{sex} ({count} deaths)" for sex, count in zip(counts_sex.index, counts_sex.values)]

fig, ax = plt.subplots(figsize=(8, 8))

wedges, texts, autotexts = ax.pie(
    counts_sex.values,
    labels=labels,
    autopct='%1.0f%%',
    labeldistance=1.1,
    pctdistance=0.7,
    startangle=180,
    wedgeprops={'edgecolor': 'white'},
    textprops={'color': 'black'},
)

#color inside pie chart
for autotext in autotexts:
    autotext.set_color("white"),
    autotext.set_fontsize(12)

ax.set_ylabel('')
plt.title(
    "Gender Breakdown of Police-Related Deaths",
    fontsize=15,
    fontweight="bold",
    color="black",
    loc="center")
plt.show()

#analyzes gender differences by age and manner of deah in police kilings
df_deaths_clean['manner_of_death'] = df_deaths_clean['manner_of_death'].replace({'shot and Tasered': 'Shot & Tasered'})
df_deaths_clean['manner_of_death'] = df_deaths_clean['manner_of_death'].replace({'shot': 'Shot'})
g = sns.boxplot(x="age", y="manner_of_death", hue="gender", data=df_deaths_clean)
g.set_xlabel("Age (years)", color="black", labelpad=15, fontweight='bold')
g.set_ylabel("Manner of Death", color="black", labelpad=15, fontweight='bold')
g.set_title(
    'Gender Differences in Age and Manner of Death Among Police Killings',
    pad=30,
    fontweight='bold',
    fontsize=15
    )
plt.show()

df_type_arm  = df_deaths_clean.copy()
value_counts= df_type_arm['armed'].value_counts()
to_replace = value_counts[value_counts <= 5].index
df_type_arm['armed'] = df_type_arm['armed'].replace(list(to_replace), "Other")
df_type_arm['armed'] = df_type_arm['armed'].str.capitalize()
counts_armed = df_type_arm['armed'].value_counts()

labels = [f"{armed} ({count})" for armed, count in zip(counts_armed.index, counts_armed.values)]

fig, ax = plt.subplots(figsize=(8, 8))
def autopct_filter(pct):
    return ('%1.0f%%' % pct) if pct > 3 else ''

wedges, texts, autotexts = ax.pie(
    counts_armed.values,
    autopct=autopct_filter,
    labeldistance=1.1,
    pctdistance=0.7,
    startangle=180,
    wedgeprops={'edgecolor': 'white'},
    textprops={'color': 'black'},
)

#color inside pie chart
for autotext in autotexts:
    autotext.set_color("white"),
    autotext.set_fontsize(12)


ax.set_ylabel('')
plt.title(
    "Types of Weapons Involved in Police Killings",
    fontsize=15,
    fontweight="bold",
    color="black",
    loc="center",
    )
ax.legend(wedges, labels, title="Weapon Type", loc="center left", bbox_to_anchor=(1, 0.5))
plt.show()

#analyze police killings, whether victums were armed with a gun or unarmed
df_armed = df_deaths_clean.copy()
df_armed['armed'] = df_armed['armed'].str.capitalize()

armed_counts = df_armed['armed'].value_counts()
armed_names = armed_counts.index
to_replace = []
for n in armed_names:
  if n != 'Unarmed':
    to_replace.append(n)

df_armed['armed'] = df_armed['armed'].replace(list(to_replace), "Armed")
unarmed_armed = df_armed['armed'].value_counts()

labels = [f"{if_armed} ({count})" for if_armed, count in zip(unarmed_armed.index, unarmed_armed.values)]


fig, ax = plt.subplots(figsize=(7, 7))


wedges, texts, autotexts = ax.pie(
    unarmed_armed,
    labels=labels,
    autopct='%1.0f%%',
    labeldistance=1.1,
    pctdistance=0.7,
    startangle=180,
    wedgeprops={'edgecolor': 'white'},
    textprops={'color': 'black'},
)

#color inside pie chart
for autotext in autotexts:
    autotext.set_color("white"),
    autotext.set_fontsize(14)

ax.set_ylabel('')

plt.title("Police Killings: Armed with Guns vs. Unarmed",
    fontsize=15,
    fontweight="bold",
    color="black",
    loc="center"
)
plt.show()

df_age = df_deaths_clean.copy()
 df_age['Under 25'] = df_deaths['age'] < 25
 df_age['Under 25'] =  df_age['Under 25'].replace((True), "Under 25").replace((False), "25 and Over")
 age_counts = df_age['Under 25'].value_counts()

 labels = [f"{age} ({count})" for age, count in zip( age_counts.index,  age_counts.values)]


fig, ax = plt.subplots(figsize=(7, 7))


wedges, texts, autotexts = ax.pie(
    age_counts,
    labels=labels,
    autopct='%1.0f%%',
    labeldistance=1.1,
    pctdistance=0.7,
    startangle=180,
    wedgeprops={'edgecolor': 'white'},
    textprops={'color': 'black'},
)

#color inside pie chart
for autotext in autotexts:
    autotext.set_color("white"),
    autotext.set_fontsize(14)

ax.set_ylabel('')

#title
plt.title(
    "Age Brackets",
    fontsize=15,
    fontweight="bold",
    color="black",
    loc="center"
)
plt.show()

#overall distribution of police killings by age
sns.histplot(data=df_age, x="age", kde=True)
plt.title("Age Distribution", pad=20, fontweight="bold")
plt.xlabel("Age (years)", labelpad=15)
plt.ylabel("Death Count", labelpad=15)
plt.show()

#analyzes police killings by age and race
df_white_age = df_age[df_age['Race'] == 'White']
white_med = int(df_white_age['age'].median())

df_black_age = df_age[df_age['Race'] == 'Black']
black_med = int(df_black_age['age'].median())

df_hispanic_age = df_age[df_age['Race'] == 'Hispanic']
hispanic_med = int(df_hispanic_age['age'].median())

df_asian_age = df_age[df_age['Race'] == 'Asian']
asian_med = int(df_asian_age['age'].median())

df_nativeamerican_age = df_age[df_age['Race'] == 'Native American']
nativeamerican_med = int(df_nativeamerican_age['age'].median())

fig, ax1 = plt.subplots()
sns.histplot(
    data=df_white_age,
    x="age",
    kde=True,
    ax=ax1,
    stat='percent'
    )
plt.title("Age Distribution of Police Killings Among White Individuals", pad=25, fontweight="bold")
plt.xlabel("Age (years)", labelpad=15)
plt.ylabel("Percent (%)", labelpad=15)
plt.text(0.9, 0.8, f'Median: {white_med} years old',
         horizontalalignment='right',
         verticalalignment='center',
         transform=plt.gca().transAxes,
         fontsize=12,
         color='black')
plt.show()

fig, ax2 = plt.subplots()
sns.histplot(
    data=df_black_age,
    x="age",
    kde=True,
    ax=ax2,
    stat='percent'
    )
plt.title("Age Distribution of Police Killings Among Black Individuals", pad=25, fontweight="bold")
plt.xlabel("Age (years)", labelpad=15)
plt.ylabel("Percent (%)", labelpad=15)
plt.text(0.9, 0.8, f'Median: {black_med} years old',
         horizontalalignment='right',
         verticalalignment='center',
         transform=plt.gca().transAxes,
         fontsize=12,
         color='black')
plt.show()

fig, ax3 = plt.subplots()
sns.histplot(
    data=df_hispanic_age,
    x="age",
    kde=True,
    ax=ax3,
    stat='percent'
    )
plt.title("Age Distribution of Police Killings Among Hispanic Individuals", pad=25, fontweight="bold")
plt.xlabel("Age (years)", labelpad=15)
plt.ylabel("Percent (%)", labelpad=15)
plt.text(0.9, 0.8, f'Median: {hispanic_med} years old',
         horizontalalignment='right',
         verticalalignment='center',
         transform=plt.gca().transAxes,
         fontsize=12,
         color='black')
plt.show()

fig, ax4 = plt.subplots()
sns.histplot(
    data=df_asian_age,
    x="age", kde=True,
    ax=ax4,
    stat='percent'
    )
plt.title("Age Distribution of Police Killings Among Asian Individuals", pad=25, fontweight="bold")
plt.xlabel("Age (years)", labelpad=15)
plt.ylabel("Percent (%)", labelpad=15)
plt.text(0.9, 0.8, f'Median: {asian_med} years old',
         horizontalalignment='right',
         verticalalignment='center',
         transform=plt.gca().transAxes,
         fontsize=12,
         color='black')
ax4.set_ylim(0, 40)
plt.show()

fig, ax5 = plt.subplots()
sns.histplot(
    data=df_nativeamerican_age,
    x="age", kde=True,
    ax=ax5,
    stat='percent'
    )
plt.title("Age Distribution of Police Killings Among Native American Individuals", pad=25, fontweight="bold")
plt.xlabel("Age (years)", labelpad=15)
plt.ylabel("Percent (%)", labelpad=15)
plt.text(0.9, 0.8,
         f'Median: {nativeamerican_med} years old',
         horizontalalignment='right',
         verticalalignment='center',
         transform=plt.gca().transAxes,
         fontsize=12,
         color='black')
ax5.set_ylim(0, 40)
plt.show()


sns.histplot(
    df_age, x="age", hue="Race", element="step",
    )
plt.title("Age Distribution of Police Killings by Race")
plt.xlabel("Age (years)")
plt.ylabel("Percent (%)")
plt.show()

#analyzes police killings proportional to the racial populations within each U.S. state
df_race_num = df_age.copy()
df_race_drop = df_race_num[['Race', 'Geographic_Area']]
df_race_state_all = df_race_drop.groupby('Geographic_Area')
df = df_race_state_all.value_counts()
df_percent = df.groupby(level=0).apply(lambda x: x / x.sum() * 100).reset_index(level=0, drop=True)
df_percent = df_percent.round(0)

df_compare = pd.merge(df_percent, df_race_melted, on=['Geographic_Area', 'Race'], suffixes=('_left', '_right'))

for area in df_compare['Geographic_Area'].unique():
    subset = df_compare[df_compare['Geographic_Area'] == area]
    subset = subset.set_index('Race')[['count', 'Percent']]
    ax = subset.plot(
        kind='bar',
        figsize=(6, 4),
        title=f"Police Killings Proportional to Racial Populations in {abbrev_to_us_state[area]}",

    )

    ax.set_title(
        f"Police Killings Proportional to Racial Populations in {abbrev_to_us_state[area]}",
        pad=20,
        fontweight='bold',
    )

    plt.ylabel("Percent (%)")
    plt.xlabel("")
    plt.xticks(rotation=45)
    plt.legend(['Percent of Police Deaths', 'Percent of Total Population'], loc='upper left', bbox_to_anchor=(1, 1))

    plt.tight_layout()
    plt.show()

#analyzes whether police killings involved people showing signs of mental illness
df_illness = df_age.copy()
df_illness['signs_of_mental_illness'] = df_illness['signs_of_mental_illness'].replace((True), "Yes").replace((False), "No")
illness_counts = df_illness['signs_of_mental_illness'].value_counts()

labels = [f"{illness} ({count})" for illness, count in zip(illness_counts.index, illness_counts.values)]

fig, ax = plt.subplots(figsize=(7, 7))


wedges, texts, autotexts = ax.pie(
    illness_counts,
    labels=labels,
    autopct='%1.0f%%',
    labeldistance=1.1,
    pctdistance=0.7,
    startangle=180,
    wedgeprops={'edgecolor': 'white'},
    textprops={'color': 'black'},
)

#color inside pie chart
for autotext in autotexts:
    autotext.set_color("white"),
    autotext.set_fontsize(14)

ax.set_ylabel('')

#title
plt.title(
    "Police-Involved Deaths:\n Individuals with Mental Illness",
    fontsize=15,
    fontweight="bold",
    color="black",
    loc="center"
)
plt.show()

#finds top ten cities with highest police killings
df_city = df_age.copy()
vc = df_city['city'].value_counts()
df_vc = vc.reset_index()
df_vc.columns = ['city', 'count']
df_vc = df_vc.head(10)
city_names = df_vc['city'].values


#plot of poverty rate by state
fig, ax = plt.subplots(figsize=(30, 10))

sns.barplot(
    data=df_vc,
    x='city',
    y='count',
    hue='count',
    palette="mako_r",
    errorbar=None,
    legend=False
)


ax.set_xlabel("State", fontsize=16, labelpad=15)
ax.set_ylabel("Death Count", fontsize=16, labelpad=15, )

plt.title(
    "Top 10 U.S. Cities by Police Killing Counts",
    fontsize=25,
    fontweight="bold",
    color="black",
    loc="center",
    pad=25

    )
plt.show()

#race disributions of police killings in the top ten cities with highest police killings count
city = df_city.copy()
city = city[['Race', 'city']]
df_filtered = city[city['city'].isin(city_names)]
city_counts = df_filtered.groupby(['city', 'Race']).size().reset_index(name='count')
city_counts.rename(columns={'city': "City"}, inplace=True)
city_counts = city_counts.reset_index()

stacked_bar = city_counts.pivot(index='City', columns='Race', values='count').fillna(0)
stacked_bar = stacked_bar.reindex(city_names)

stacked_bar.plot(kind='bar', stacked=True, figsize=(14,8))
plt.ylabel('Death Count', labelpad=15)
plt.xlabel('City')
plt.title("Distribution of Police Killings by Race:\nTop 10 Cities with Highest Police Killings", fontweight='bold', fontsize=15, pad=15)
plt.legend(title='Race')
plt.tight_layout()
plt.xticks(rotation=45)

plt.show()

#compares race distributions with police killings by race in the top ten cities
city_counts['count'] = city_counts['count'].astype(int)
city_percents = city_counts.groupby('City').apply(
    lambda df: df.assign(percent=(df['count'] / df['count'].sum()) * 100)
).reset_index(drop=True)
city_percents['percent'] = city_percents['percent'].round(0)
city_percents = city_percents.drop(columns=['count'])

df_race_melted_city['City'] = df_race_melted_city['City'].str.replace('city', '', regex=False)
df_race_melted_city['City'] = df_race_melted_city['City'].str.replace(r'\s$', '', regex=True)
df_race_melted_city.drop_duplicates(inplace=True)
df_race_melted_city.reset_index(drop=True)

df_race_filtered = df_race_melted_city[df_race_melted_city['City'].isin(city_names)]
race_counts = df_race_filtered[['City', 'Race', 'Percent']].reset_index(drop=True)
race_counts.drop_duplicates(inplace=True)
race_counts.sort_values(by='City', ascending=False, inplace=True)

df_compare = pd.merge(city_percents, df_race_melted_city, on=['City', 'Race'], suffixes=('_left', '_right'))


for area in df_compare['City'].unique():
    subset = df_compare[df_compare['City'] == area]
    subset = subset.set_index('Race')[['percent', 'Percent']]
    subset.plot(
        kind='bar',
        figsize=(6, 4),
    )
    plt.ylabel("Percent (%)")
    plt.xlabel('')
    plt.xticks(rotation=45)
    plt.legend(['Percent of Police Deaths', 'Percent of Total Population'], loc='upper left', bbox_to_anchor=(1, 1))
    plt.title(f"Police Killings Proportional to Racial Populations in {area}", pad=30)
    plt.tight_layout()
    plt.show()

"""
**Choropleth Map of police killing counts by state**


"""

#looks at the total amount of police killings from 1930 - 2025 by state
df_cholorpleth = df_deaths_clean.copy()
df_cholorpleth = df_cholorpleth[['Geographic_Area']]
df_cholorpleth = df_cholorpleth.value_counts()
df_cholorpleth = df_cholorpleth.reset_index(name='count')
df_cholorpleth['full_name'] = ''
df_cholorpleth['full_name'] = df_cholorpleth['Geographic_Area'].map(abbrev_to_us_state)

fig = px.choropleth(
    df_cholorpleth,
    locations='Geographic_Area',
    locationmode='USA-states',
    color='count',
    hover_name='full_name',
    color_continuous_scale='Viridis',
    scope='usa',
    title='Total Police Killings by State (1930–2025)',
    labels={'count': 'Total Police Killings'},
    hover_data={'count': True, 'Geographic_Area': False},
)

fig.update_layout(
    geo=dict(showframe=False, showcoastlines=True, projection_type='albers usa'),
    margin=dict(l=0, r=0, t=50, b=0),
    title={
        'x': 0.5,
        'font': {'size': 22, 'color': 'black', 'weight': 'bold', 'family': 'Avenir',},
        'xref': 'paper'
    }
)
fig.update_traces(
    marker_line_width=1.0,
    marker_line_color='grey',
    selector=dict(type='choropleth',

  )

)

fig.show()

#analyzes total amount of police killings per year, and calculates slope
df_time = df_deaths_clean.copy()
df_time = df_time[['year']]
df_time = df_time.value_counts()
df_time = df_time.reset_index(name='count')
df_time.sort_values(by='year', ascending=True, inplace=True)

#plot of police killings over the years
fig, ax = plt.subplots(figsize=(20, 6))

sns.barplot(
    data=df_time,
    x="year",
    y="count",
    hue="count",
    palette="mako_r",
    errorbar=None,
    legend=False,
)

plt.title('Yearly Police Killing Counts', pad=20, fontweight='bold', fontsize=15)
ax.set_xlabel("Year", fontsize=14, labelpad=15)
ax.set_ylabel("Death Count", fontsize=14, labelpad=15)
plt.xticks(rotation=45)
plt.show()

result = linregress(df_time['year'], df_time['count'])
print(f"Slope: {result.slope}, p-value: {result.pvalue}")